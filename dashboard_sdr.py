# dashboard_sdr.py
import io
import os
import json
import random
import time
from datetime import datetime

import numpy as np
import pandas as pd
import soundfile as sf
import streamlit as st

st.set_page_config(page_title="SDR Training - Pack", layout="wide")

# =======================
# DETECCI√ìN DE GRABADOR (compat 0.0.8 + fallback)
# =======================
RECORDER = None
try:
    # Para streamlit-mic-recorder==0.0.8 la API usa as_wav=True
    from streamlit_mic_recorder import mic_recorder
    RECORDER = "mic"
except Exception:
    try:
        from audio_recorder_streamlit import audio_recorder
        RECORDER = "audio"
    except Exception:
        RECORDER = None

# =======================
# DATA BASE
# =======================
PRICING = {
    "Mentoring individual": "149 ‚Ç¨/sesi√≥n o 299 ‚Ç¨/mes",
    "Coaching individual": "199 ‚Ç¨/sesi√≥n o 399 ‚Ç¨/mes",
    "Group Mentoring/Coaching": "3.490‚Äì4.900 ‚Ç¨/clase (<=10 personas)",
    "Train the Trainer": "2.900 ‚Ç¨/clase (<=10 personas)",
    "Assessment": "90‚Äì1.590 ‚Ç¨ por persona",
}

VALUE_POINTS = [
    "Reduce el coste de rotaci√≥n (~15.000 ‚Ç¨ por renuncia).",
    "Mejora engagement, retenci√≥n y productividad.",
    "Escalable y data-driven (anal√≠ticas, reporting, 360¬∞ control).",
    "Red de +200 mentores/coaches internacionales, 15+ pa√≠ses.",
    "Cumplimiento GDPR, ISO 9001, infra en la UE/EEE.",
]

OBJECTIONS_BASE = {
    "‚è±Ô∏è Poco tiempo": [
        "Ahora no puedo, estoy entrando a una reuni√≥n.",
        "Dime r√°pido, ¬øqu√© necesitas?",
        "No tengo tiempo para esto.",
    ],
    "‚ùì Preguntas espec√≠ficas": [
        "¬øC√≥mo integran con nuestro calendario y herramientas?",
        "¬øC√≥mo med√≠s el impacto y el ROI?",
        "¬øTen√©is casos en mi sector?",
    ],
    "üí∏ Precio/Presupuesto": [
        "No tenemos presupuesto ahora mismo.",
        "Es caro para nosotros.",
        "En este Q no podemos invertir.",
    ],
    "üèóÔ∏è Ya tenemos proveedor/programa": [
        "Ya tenemos un programa interno de mentoring.",
        "Trabajamos con otro proveedor.",
        "Esto lo maneja nuestra L&D internamente.",
    ],
    "üß≠ Prioridad/Timing": [
        "No es una prioridad este trimestre.",
        "Vuelve a llamarme en 6 meses.",
        "Estamos en reorg; no es el momento.",
    ],
    "üë§ No soy la persona": [
        "No soy yo quien decide esto.",
        "Esto lo lleva otra √°rea.",
        "No gestiono este presupuesto.",
    ],
    "üì® M√°ndame info": [
        "M√°ndame un correo y lo reviso.",
        "Env√≠ame un PDF con precios y lo vemos.",
        "D√©jame la info y si me interesa te llamo.",
    ],
    "üôÖ No interesado": [
        "No me interesa.",
        "No vemos utilidad.",
        "Esto no nos aplica.",
    ],
}

OBJECTIONS_BY_INDUSTRY = {
    "General": OBJECTIONS_BASE,
    "Telco": {
        **OBJECTIONS_BASE,
        "‚ùì Preguntas espec√≠ficas": OBJECTIONS_BASE["‚ùì Preguntas espec√≠ficas"]
        + [
            "¬øSe integra con nuestras plataformas de atenci√≥n y ticketing?",
            "¬øPodemos mapear habilidades para equipos de field/ops?",
        ],
    },
    "Retail": {
        **OBJECTIONS_BASE,
        "üß≠ Prioridad/Timing": OBJECTIONS_BASE["üß≠ Prioridad/Timing"]
        + ["Estamos en peak season, no podemos distraer al equipo ahora."],
    },
    "FinServ": {
        **OBJECTIONS_BASE,
        "üèóÔ∏è Ya tenemos proveedor/programa": OBJECTIONS_BASE["üèóÔ∏è Ya tenemos proveedor/programa"]
        + ["Cumplimos estrictamente con compliance, ¬øc√≥mo garantiz√°is GDPR/ISO?"],
    },
    "IT": {
        **OBJECTIONS_BASE,
        "‚ùì Preguntas espec√≠ficas": OBJECTIONS_BASE["‚ùì Preguntas espec√≠ficas"]
        + ["¬øTen√©is APIs o SSO? ¬øC√≥mo es el provisioning?"],
    },
}

MODEL_ANSWERS = {
    "‚è±Ô∏è Poco tiempo": """Totalmente, te robo solo 20‚Äì30 segundos: ayudamos a reducir la rotaci√≥n (~15k‚Ç¨ por renuncia) con mentoring/coaching data-driven y +200 expertos.
Si tiene sentido, agendamos 20 min esta semana. ¬øTe va el jueves 11:30? ¬øA qu√© email te env√≠o la invitaci√≥n?""",
    "‚ùì Preguntas espec√≠ficas": """¬°Buena pregunta! Integramos 1-click scheduling y medimos impacto (engagement, NPS, progreso, ROMI/ROCI).
Tengo 2‚Äì3 ejemplos de tu sector para mostrarte en 15‚Äì20 min. ¬øMa√±ana a las 12:00? ¬øCu√°l es el mejor correo para la invitaci√≥n?""",
    "üí∏ Precio/Presupuesto": """Entiendo el presupuesto. Muchas empresas empiezan peque√±o (p.ej. 299 ‚Ç¨/mes por persona) y escalan al ver resultados.
Hagamos 20 min para ajustar alcance al presupuesto. ¬øMartes 10:30? ¬øTu email para enviarte el calendario?""",
    "üèóÔ∏è Ya tenemos proveedor/programa": """¬°Genial! Solemos complementar programas internos con red global de mentores y m√©tricas de impacto (no sustituimos, potenciamos).
Vemos encaje en 20 min y c√≥mo convivimos con lo que ya ten√©is. ¬øMi√©rcoles 16:00? ¬øA qu√© email mando la invitaci√≥n?""",
    "üß≠ Prioridad/Timing": """Perfecto, respeto el timing. Hagamos 15‚Äì20 min para mapear casos de uso y dejarlo listo cuando abra la ventana.
¬øJueves 9:30? ¬øCu√°l es tu mejor correo para el invite?""",
    "üë§ No soy la persona": """Gracias por dec√≠rmelo. ¬øQui√©n lidera L&D/Talent/HR para incluirle? Propongo 20 min con ambos para valorar encaje.
¬øMe facilitas su email y te copio? ¬øViernes 12:00?""",
    "üì® M√°ndame info": """Encantado. Para enviar algo √∫til, bloqueamos 15‚Äì20 min y lo adapto a tu contexto. Te comparto casos y n√∫meros.
¬øMa√±ana 11:30? ¬øA qu√© email te env√≠o la invitaci√≥n?""",
    "üôÖ No interesado": """Gracias por la franqueza. Solo por validar: aportamos en rotaci√≥n y upskilling de managers.
Si no encaja, cierro aqu√≠; si hay curiosidad, 15 min y te muestro datos. ¬øLunes 12:30? ¬øTu email?""",
}

CTA_SNIPPETS = [
    "¬øTe va una **discovery** de 20 minutos esta semana?",
    "¬øCu√°l es el **mejor correo** para enviarte la invitaci√≥n?",
    "¬øPrefieres **martes 10:30** o **jueves 11:30**?",
    "Te env√≠o el **calendario con 2 slots** y lo ajustamos.",
]

PERSONA_SCRIPTS = {
    "CFO": [
        "Enfatiza **ROI**, reducci√≥n de rotaci√≥n (15k‚Ç¨/renuncia), productividad.",
        "Propuesta: piloto acotado + m√©tricas de impacto trimestral.",
    ],
    "HR Director": [
        "Enfatiza **engagement**, desarrollo de liderazgo, NPS, experiencia de empleado.",
        "Propuesta: cohortes con anal√≠ticas y reporting automatizado para stakeholders.",
    ],
    "Talent Manager": [
        "Enfatiza **upskilling de High Potentials**, sucesi√≥n y carrera.",
        "Propuesta: mentoring/coaching con matching por objetivos y KPIs claros.",
    ],
    "Founder": [
        "Enfatiza **velocidad de ejecuci√≥n**, cultura, excelencia de management.",
        "Propuesta: plan lean con quick wins y tablero de impacto.",
    ],
}

# =======================
# PERSISTENCIA CSV / GSHEETS
# =======================
@st.cache_data
def load_history_from_csv(path: str) -> pd.DataFrame:
    try:
        df = pd.read_csv(path)
        expected = {"timestamp", "industry", "persona_role", "situation", "objection", "response", "score"}
        for m in expected - set(df.columns):
            df[m] = ""
        return df
    except Exception:
        return pd.DataFrame(
            columns=["timestamp", "industry", "persona_role", "situation", "objection", "response", "score"]
        )


def save_history_to_csv(df: pd.DataFrame, path: str) -> bool:
    try:
        df.to_csv(path, index=False)
        return True
    except Exception:
        return False


def gs_get_credentials_from_secrets():
    # Opcional Google Sheets (requiere st.secrets configurado)
    sa = st.secrets["gsheets"]["service_account_json"]
    if isinstance(sa, str):
        sa = json.loads(sa)
    return sa, st.secrets["gsheets"]["spreadsheet_id"]


def gs_test_connection():
    try:
        sa_dict, spreadsheet_id = gs_get_credentials_from_secrets()
        import gspread
        from google.oauth2.service_account import Credentials

        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_info(sa_dict, scopes=scopes)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(spreadsheet_id)
        try:
            ws = sh.worksheet("history")
        except Exception:
            ws = sh.add_worksheet(title="history", rows="1000", cols="20")
        ws.update(
            "A1:G1",
            [["timestamp", "industry", "persona_role", "situation", "objection", "response", "score"]],
        )
        return "‚úÖ Conexi√≥n OK y worksheet 'history' preparado."
    except Exception as e:
        return f"‚ùå Error de conexi√≥n: {e}"


def gs_save_history_df(df: pd.DataFrame) -> str:
    try:
        sa_dict, spreadsheet_id = gs_get_credentials_from_secrets()
        import gspread
        from google.oauth2.service_account import Credentials

        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_info(sa_dict, scopes=scopes)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(spreadsheet_id)
        try:
            ws = sh.worksheet("history")
        except Exception:
            ws = sh.add_worksheet(title="history", rows="1000", cols="20")
        ws.clear()
        ws.update([df.columns.tolist()] + df.values.tolist())
        return "‚úÖ Historial guardado en Google Sheets (worksheet: history)."
    except Exception as e:
        return f"‚ùå No se pudo guardar en Sheets: {e}"

# =======================
# SESSION STATE
# =======================
if "history" not in st.session_state:
    st.session_state.history = []
if "timer_running" not in st.session_state:
    st.session_state.timer_running = False
if "timer_end" not in st.session_state:
    st.session_state.timer_end = 0
if "current_obj" not in st.session_state:
    st.session_state.current_obj = None

# =======================
# NAV
# =======================
st.title("üìä SDR Training Dashboard ‚Äì Cold Calling (Pack)")
st.caption("Entrena rapport, manejo de objeciones y **booking de discovery**.")

menu = st.sidebar.radio(
    "Navegaci√≥n",
    [
        "üéØ Objetivos del Ejercicio",
        "üßë‚Äçüíº Escenarios de Prospectos",
        "üè¢ Company Profile (Pack)",
        "üí° Argumentos & Objeciones",
        "‚öîÔ∏è Entrenador de Objeciones",
        "üé§ Simulador de Pitch",
        "üéôÔ∏è Grabador de Voz (beta)",
        "üéß Audio Check (ligero)",
        "üìà Historial & Persistencia",
        "üìö Guiones por Persona",
    ],
)

# =======================
# PAGES
# =======================
if menu == "üéØ Objetivos del Ejercicio":
    st.header("üéØ Objetivo del Ejercicio")
    st.markdown(
        """
- **Meta principal**: conseguir una *discovery call* (no vender).
- **Acciones clave**:
  - Mantener la conversaci√≥n fluida  
  - Manejar objeciones con empat√≠a  
  - **Pedir expl√≠citamente** una reuni√≥n  
  - **Solicitar email** para enviar invitaci√≥n de calendario  
    """
    )

elif menu == "üßë‚Äçüíº Escenarios de Prospectos":
    st.header("üßë‚Äçüíº Escenarios de Prospects")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Prospecto A ‚Äì Poco tiempo")
        st.write("- Te corta r√°pido\n- Quiere ir al grano\n- S√© conciso y directo")
        st.code(
            "‚ÄúHola [nombre], soy Nicol√°s de Pack. S√© que tienes poco tiempo: "
            "¬øte robo 20‚Äì30 segundos para ver si tiene sentido agendar 20 min?‚Äù"
        )
    with col2:
        st.subheader("Prospecto B ‚Äì Preguntas espec√≠ficas")
        st.write("- Pide detalles del producto\n- Quiere evidencia\n- Aporta seguridad sin entrar en demo")
        st.code(
            "‚ÄúIntegramos 1-click scheduling y medimos impacto (engagement, NPS, ROMI/ROCI). "
            "¬øVemos 20 min con ejemplos de tu sector?‚Äù"
        )

elif menu == "üè¢ Company Profile (Pack)":
    st.header("üè¢ Perfil de la Empresa ‚Äì Pack")
    st.markdown(
        """
**Problema**: ~40% empleados insatisfechos, coste medio de renuncia **~15.000 ‚Ç¨**.  
**Soluci√≥n**: Plataforma de mentoring/coaching con IA, matching gamificado, +200 mentores, anal√≠ticas y reporting.  
**Valor**: retenci√≥n, engagement, productividad; data-driven; cumplimiento GDPR/ISO; servidores UE.  
    """
    )
    st.subheader("üí∞ Modelos de Precio (Resumen)")
    for k, v in PRICING.items():
        st.write(f"- **{k}**: {v}")

elif menu == "üí° Argumentos & Objeciones":
    st.header("üí° Argumentos de Valor")
    for v in VALUE_POINTS:
        st.write(f"- {v}")
    st.subheader("‚úâÔ∏è CTAs r√°pidas")
    for c in CTA_SNIPPETS:
        st.code(c)

    st.subheader("üß± Objeciones por industria")
    industry = st.selectbox("Industria", list(OBJECTIONS_BY_INDUSTRY.keys()), index=0)
    obj_bank = OBJECTIONS_BY_INDUSTRY[industry]
    for cat, lst in obj_bank.items():
        with st.expander(f"{cat}"):
            for o in lst:
                st.write(f"- {o}")
            st.markdown("**Respuesta sugerida:**")
            st.info(MODEL_ANSWERS.get(cat, "‚Äî"))

elif menu == "‚öîÔ∏è Entrenador de Objeciones":
    st.header("‚öîÔ∏è Entrenador de Objeciones (cron√≥metro + scoring)")
    cols = st.columns([1.2, 1, 1])
    industry = cols[0].selectbox("Industria", list(OBJECTIONS_BY_INDUSTRY.keys()), index=0)
    situation = cols[1].selectbox("Situaci√≥n", list(OBJECTIONS_BY_INDUSTRY[industry].keys()))
    dur = cols[2].number_input("Duraci√≥n respuesta (seg)", min_value=15, max_value=90, value=30, step=5)
    unique = st.checkbox("Evitar repetir objeciones recientes", value=True)

    obj_pool = OBJECTIONS_BY_INDUSTRY[industry][situation][:]

    def pick_obj():
        pool = obj_pool[:]
        if unique and len(st.session_state.history) > 0:
            recent = [h["objection"] for h in st.session_state.history[-5:]]
            pool = [p for p in pool if p not in recent] or obj_pool[:]
        return random.choice(pool)

    c1, c2 = st.columns(2)
    with c1:
        if st.button("üé≤ Nueva objeci√≥n"):
            st.session_state.current_obj = pick_obj()
            st.session_state.timer_running = False
    with c2:
        if st.button("‚è±Ô∏è Iniciar cron√≥metro"):
            if st.session_state.current_obj:
                st.session_state.timer_running = True
                st.session_state.timer_end = time.time() + dur

    st.subheader("üóØÔ∏è Objeci√≥n")
    st.warning(st.session_state.current_obj or "Pulsa **üé≤ Nueva objeci√≥n** para empezar.")

    timer_box = st.empty()
    if st.session_state.timer_running:
        remaining = int(max(0, st.session_state.timer_end - time.time()))
        timer_box.metric("Tiempo restante", f"{remaining}s")
        if remaining <= 0:
            st.session_state.timer_running = False
            st.success("‚è±Ô∏è ¬°Tiempo!")
        else:
            st.experimental_rerun()

    st.markdown("**üí° Pistas t√°cticas**")
    tips = {
        "‚è±Ô∏è Poco tiempo": ["Pide 20‚Äì30s + beneficio claro + micro-CTA.", "Cierra con fecha/hora y pide email."],
        "‚ùì Preguntas espec√≠ficas": ["Responde alto nivel + prueba social/analytics.", "Invita a 20 min para profundizar."],
        "üí∏ Precio/Presupuesto": ["Empatiza, entrada peque√±a escalable.", "Cierra discovery y pide email."],
        "üèóÔ∏è Ya tenemos proveedor/programa": ["Complemento, no sustituto.", "Discovery para mapear convivencia."],
        "üß≠ Prioridad/Timing": ["Alinea tiempos, micro-reuni√≥n de preparaci√≥n.", "CTA concreta + email."],
        "üë§ No soy la persona": ["Pide referente + email; call conjunta."],
        "üì® M√°ndame info": ["Convierte env√≠o de info en meeting contextualizado."],
        "üôÖ No interesado": ["Agradece, valida hip√≥tesis de valor; ofrece 15 min o cierra cordial."],
    }
    for t in tips.get(situation, []):
        st.write("- " + t)

    with st.expander("üß™ Respuesta modelo (ver despu√©s de intentar)"):
        st.info(MODEL_ANSWERS.get(situation, "‚Äî"))

    st.subheader("üéôÔ∏è Tu respuesta")
    resp = st.text_area("Escribe bullets o tu guion (30‚Äì90s).", height=150, placeholder="Hola [nombre]...")

    st.markdown("**üßÆ Auto-evaluaci√≥n (marca si lo hiciste):**")
    cc = st.columns(4)
    crit = [
        cc[0].checkbox("Ganaste tiempo"),
        cc[1].checkbox("Empatizaste/Valor claro"),
        cc[2].checkbox("Propusiste discovery"),
        cc[3].checkbox("Pediste email"),
    ]
    score = sum(crit)

    persona_role = st.selectbox("Persona (rol)", list(PERSONA_SCRIPTS.keys()), index=1)

    save_cols = st.columns([1, 1, 2])
    if save_cols[0].button("üíæ Guardar intento"):
        if st.session_state.current_obj:
            st.session_state.history.append(
                {
                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "industry": industry,
                    "persona_role": persona_role,
                    "situation": situation,
                    "objection": st.session_state.current_obj,
                    "response": resp.strip(),
                    "score": score,
                }
            )
            st.success("Intento guardado ‚úÖ")
        else:
            st.error("Genera una objeci√≥n antes de guardar.")

    if save_cols[1].button("üßπ Limpiar"):
        st.session_state.current_obj = None

elif menu == "üé§ Simulador de Pitch":
    st.header("üé§ Practica tu Pitch")
    script = st.text_area(
        "Escribe tu pitch (30‚Äì45s):",
        height=200,
        placeholder="Hola [nombre], soy Nicol√°s de Pack. S√© que tienes poco tiempo, ¬øte robo 20‚Äì30 segundos...?",
    )
    st.subheader("üìå Plantilla sugerida")
    st.write(
        """
1) **Inicio (ganar tiempo)**: ‚Äú¬øTe robo 20‚Äì30 segundos?‚Äù  
2) **Dolor**: rotaci√≥n cara (~15k‚Ç¨), managers sin upskilling  
3) **Valor**: mentoring/coaching con IA, +200 expertos, m√©tricas  
4) **Cierre**: ‚Äú¬øAgendamos 20 min?‚Äù  
5) **CTA email**: ‚Äú¬øCu√°l es el mejor correo?‚Äù  
    """
    )
    if st.button("üíæ Guardar Notas"):
        st.success("‚úÖ Notas guardadas (sesi√≥n actual).")

elif menu == "üéôÔ∏è Grabador de Voz (beta)":
    st.header("üéôÔ∏è Grabador de Voz (beta)")
    st.caption("Graba tu respuesta (30‚Äì90s). Si no hay grabador disponible, sube un audio (WAV/MP3).")

    os.makedirs("recordings", exist_ok=True)

    latest_wav = None
    meta_col1, meta_col2, meta_col3 = st.columns(3)
    saved_path = st.empty()

    def _save_wav_and_info_from_bytes(wav_bytes: bytes) -> dict:
        """Guarda bytes en recordings/ como WAV PCM y devuelve info b√°sica."""
        ts = datetime.now().strftime("%Y%m%d-%H%M%S")
        path = f"recordings/rec_{ts}.wav"
        data, sr = sf.read(io.BytesIO(wav_bytes), dtype="float32")
        sf.write(path, data, sr)
        duration_sec = round(len(data) / sr, 2)
        return {"path": path, "samplerate": sr, "duration": duration_sec}

    audio_bytes = None

    if RECORDER == "mic":
        st.write("**Grabador (streamlit-mic-recorder)**")
        audio_dict = mic_recorder(
            start_prompt="Start recording",
            stop_prompt="Stop",
            just_once=False,
            as_wav=True,  # clave para 0.0.8
            key="mic1",
        )
        if audio_dict and "bytes" in audio_dict and audio_dict["bytes"]:
            audio_bytes = audio_dict["bytes"]

    elif RECORDER == "audio":
        st.write("**Grabador (audio-recorder-streamlit)**")
        # Este componente devuelve bytes WAV
        audio_bytes = audio_recorder(pause_threshold=2.0, sample_rate=41_000, key="mic2")

    else:
        st.info("No se detect√≥ un grabador compatible. Usa el cargador de archivos m√°s abajo.")

    if audio_bytes:
        try:
            info = _save_wav_and_info_from_bytes(audio_bytes)
            latest_wav = info["path"]
            meta_col1.metric("Duraci√≥n", f"{info['duration']} s")
            meta_col2.metric("Sample rate", f"{info['samplerate']} Hz")
            meta_col3.success("Grabaci√≥n OK")
            saved_path.markdown(f"üíæ Archivo guardado: **`{info['path']}`**")
            st.audio(audio_bytes, format="audio/wav")
        except Exception as e:
            st.error(f"No se pudo procesar el audio: {e}")

    # Cargador de archivos como respaldo
    st.markdown("#### üì§ O sube un audio (WAV/MP3/M4A/OGG)")
    up = st.file_uploader("Archivo de audio", type=["wav", "mp3", "m4a", "ogg"])
    if up is not None:
        try:
            raw = up.read()
            info = _save_wav_and_info_from_bytes(raw)
            latest_wav = info["path"]
            meta_col1.metric("Duraci√≥n", f"{info['duration']} s")
            meta_col2.metric("Sample rate", f"{info['samplerate']} Hz")
            meta_col3.success("Cargado OK")
            st.audio(raw, format=f"audio/{up.type.split('/')[-1] if up.type else 'wav'}")
            saved_path.markdown(f"üíæ Archivo guardado: **`{info['path']}`**")
        except Exception as e:
            st.error(f"No se pudo leer el archivo: {e}")

    st.markdown("---")
    st.subheader("üìù Transcript")
    st.caption("Pega/edita manualmente o intenta transcribir con Faster-Whisper (opcional).")
    prefill = st.session_state.get("auto_transcript", "")
    transcript = st.text_area("Transcript", height=160, value=prefill, placeholder="Pega o escribe aqu√≠ tu respuesta‚Ä¶")

    col_t1, col_t2 = st.columns([1.2, 2])
    try_transcribe = col_t1.button("ü§ñ Transcribir (Faster-Whisper)")
    whisper_status = col_t2.empty()


    st.markdown("### ‚è≠Ô∏è Enviar Transcript a **Audio Check**")
    if st.button("‚û°Ô∏è Enviar a Audio Check"):
        st.session_state["audio_check_transcript"] = transcript
        st.success("Transcript copiado. Ve a **üéß Audio Check (ligero)**")

elif menu == "üéß Audio Check (ligero)":
    st.header("üéß Audio Check (sin dependencias pesadas)")
    st.caption("Analiza ritmo (WPM), muletillas y pausas usando tu transcript + duraci√≥n.")

    col = st.columns(2)
    duration_sec = col[0].number_input("Duraci√≥n del pitch (segundos)", min_value=10, max_value=300, value=45, step=5)
    prefill = st.session_state.get("audio_check_transcript", "")
    transcript = col[1].text_area("Transcript (pega tu texto)", height=180, value=prefill, placeholder="Hola... (tu texto)")

    filler_words = [
        "eh",
        "ehh",
        "mmm",
        "este",
        "esto",
        "o sea",
        "vale",
        "ok",
        "tipo",
        "digamos",
        "¬øvale?",
        "¬øok?",
        "em",
        "eeeh",
        "nada",
        "bueno",
    ]
    pause_markers = ["(pausa)", "[pausa]", "...", "‚Äî ‚Äî"]

    if st.button("Analizar"):
        words = transcript.strip().split()
        n_words = len(words)
        wpm = round((n_words / duration_sec) * 60, 1) if duration_sec > 0 else 0.0
        text_low = transcript.lower()
        filler_counts = {fw: text_low.count(fw) for fw in filler_words}
        total_fillers = sum(filler_counts.values())
        total_pauses = sum(text_low.count(p) for p in pause_markers)
        pauses_per_min = round((total_pauses / duration_sec) * 60, 2) if duration_sec else 0

        c1, c2, c3, c4 = st.columns(4)
        c1.metric("Palabras", n_words)
        c2.metric("Ritmo (WPM)", wpm)
        c3.metric("Muletillas", total_fillers)
        c4.metric("Pausas/min", pauses_per_min)

        with st.expander("üîé Detalle muletillas"):
            st.write(pd.DataFrame([filler_counts]).T.rename(columns={0: "conteo"}))

        tips = []
        if wpm < 110:
            tips.append("Ritmo bajo: sube a ~130‚Äì160 WPM.")
        if wpm > 170:
            tips.append("Ritmo alto: baja a ~130‚Äì160 WPM.")
        if total_fillers >= 5:
            tips.append("Reduce muletillas (practica silencios breves).")
        if pauses_per_min > 6:
            tips.append("Demasiadas pausas: estructura mejor tus frases.")
        if not tips:
            tips = ["Buen ritmo y control de muletillas/pausas. ‚úÖ"]
        st.success(" ¬∑ ".join(tips))

elif menu == "üìà Historial & Persistencia":
    st.header("üìà Historial de intentos")
    if len(st.session_state.history) == 0:
        st.info("A√∫n no hay intentos guardados. Ve a **Entrenador de Objeciones**.")
    else:
        df = pd.DataFrame(st.session_state.history)
        st.dataframe(df, use_container_width=True)

        dl = df.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è Descargar CSV", data=dl, file_name="sdr_history.csv", mime="text/csv")

        st.subheader("üíæ Guardar en disco")
        save_path = st.text_input("Ruta (ej: history.csv)", value="history.csv")
        if st.button("Guardar CSV"):
            ok = save_history_to_csv(df, save_path)
            st.success("Historial guardado en CSV ‚úÖ" if ok else "No se pudo guardar el CSV ‚ùå")

        st.subheader("‚òÅÔ∏è Guardar en Google Sheets (opcional)")
        st.caption("Requiere `st.secrets['gsheets']` con `service_account_json` y `spreadsheet_id`.")
        cols = st.columns(2)
        if cols[0].button("üîå Probar conexi√≥n Google Sheets"):
            st.info(gs_test_connection())
        if cols[1].button("‚òÅÔ∏è Guardar historial en Google Sheets"):
            st.info(gs_save_history_df(df))

    st.subheader("üì§ Cargar historial desde CSV")
    up = st.file_uploader("Sube un CSV exportado", type=["csv"])
    if up is not None:
        new_df = pd.read_csv(up)
        for _, row in new_df.iterrows():
            st.session_state.history.append(
                {
                    "timestamp": str(row.get("timestamp", "")),
                    "industry": str(row.get("industry", "")),
                    "persona_role": str(row.get("persona_role", "")),
                    "situation": str(row.get("situation", "")),
                    "objection": str(row.get("objection", "")),
                    "response": str(row.get("response", "")),
                    "score": int(row.get("score", 0)),
                }
            )
        st.success("Historial cargado y fusionado ‚úÖ")

elif menu == "üìö Guiones por Persona":
    st.header("üìö Guiones por Persona (rol decisor)")
    role = st.selectbox("Persona (rol)", list(PERSONA_SCRIPTS.keys()))
    for bullet in PERSONA_SCRIPTS[role]:
        st.write("- " + bullet)

# ======= FOOTER =======
st.markdown("---")
st.caption(
    "Foco: rapport, claridad, **discovery**, email. Grabaci√≥n + transcripci√≥n (opcional), CSV/Sheets, audio-check."
)
